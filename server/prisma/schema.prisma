generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Role {
  TENANT
  MANAGER
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  password            String
  name                String
  role                Role
  emailVerified        Boolean   @default(false)
  resetPasswordToken  String?
  resetPasswordExpires DateTime?
  createdAt           DateTime  @default(now())
  managedProperties Property[] @relation("ManagerProperties")
  tenantProperties  Property[] @relation("TenantProperties")
  favorites         Property[] @relation("TenantFavorites")
  applications      Application[] @relation("TenantApplications")
  leases            Lease[] @relation("TenantLeases")
  otps             Otp[]  @relation("UserOtps")
  sessions             Session[] @relation("UserSessions")
}

model Otp {
  id        String   @id @default(uuid())
  code      String
  userId    String
  expiresAt DateTime
  createdAt DateTime
  emailVerified Boolean @default(false)
  user      User     @relation("UserOtps", fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Session {
  id          String   @id @default(uuid())
  user        User     @relation("UserSessions", fields: [userId], references: [id])
  userId      String
  refreshToken String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model Property {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  subDescription    String
  pricePerMonth     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        Int
  managerId         String

  location     Location      @relation(fields: [locationId], references: [id])
  manager      User          @relation("ManagerProperties", fields: [managerId], references: [id])
  leases       Lease[]
  applications Application[]
  favoritedBy  User[]        @relation("TenantFavorites")
  tenants      User[]        @relation("TenantProperties")
}

model Location {
  id          Int                                   @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  properties Property[]
}

model Application {
  id              Int               @id @default(autoincrement())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      Int
  tenantId        String
  name            String
  email           String
  phoneNumber     String
  message         String?
  leaseId         Int?              @unique

  property Property @relation(fields: [propertyId], references: [id])
  tenant   User     @relation("TenantApplications", fields: [tenantId], references: [id])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id              Int      @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  rent            Float
  deposit         Float
  propertyId      Int
  tenantId        String
  status          ApplicationStatus  @default(Pending) 
  property    Property     @relation(fields: [propertyId], references: [id])
  tenant      User         @relation("TenantLeases", fields: [tenantId], references: [id])
  application Application?
  payments    Payment[]
}

model Payment {
  id            Int            @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       Int

  lease Lease @relation(fields: [leaseId], references: [id])
}